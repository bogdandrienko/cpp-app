// cpp-console-app.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.

// Заголовочные файлы:
#include <iostream>
#include <string>
#include <Windows.h>
#include <cmath>

#include "main.h"


// Главная функция:
int main()
{	
	setlocale(0, "");
	SetConsoleCP(1251);

	//std::cout << "Ответ: " << mathematick() << "\n";
	

	std::cout << "Ответ: " << pow(2, 3) << "\n";

	std::cout << "Ответ: " << abs(-23) << "\n";

	std::cout << "Ответ: " << sqrt(ceil(15.8)) << "\n";

	std::cout << "Ответ: " << ceil(23.5) << "\n";

	std::cout << "Ответ: " << floor(23.5) << "\n";

	//std::string Text = "Пусто";
	//std::cin >> Text;
	//std::cout << "Вы написали: " << Text;


	
	closeConsole(false);
}



 //Далее будут подсказки по работе в С++:
// **************************************


// main.h
/*
	main.h - Заголовочный файл.
	Примеры:
		main.h //
		Предварительное объявление функций позволяет компактно сгруппировать их в начале, 
		чтобы программисту легче было найти главную функцию в файле. В принципе, все такие 
		предварительные объявления (как бы "заголовки" функций) программисты выносят вообще 
		в отдельный файл с расширением *.h, который так и называется "заголовочный файл". 
		Это позволяет размещать функции в файле *.cpp не переживая об их порядке следования.

		По мере увеличения размера программ весь код уже не помещается в нескольких файлах, 
		записывать каждый раз предварительные объявления для функций, которые мы хотим использовать, 
		но которые находятся в других файлах, становится всё утомительнее и утомительнее. 
		Хорошо было бы, если бы все предварительные объявления находились в одном месте, не так ли?

Файлы .cpp не являются единственными файлами в проектах. Есть еще один тип файлов — заголовочные 
файлы (или «заголовки»), которые имеют расширение .h. Целью заголовочных файлов является удобное 
хранение набора объявлений объектов для их последующего использования в других программах.
*/

// main.cpp
/*
	main.cpp - Исходный код.
	Примеры:
		main.cpp //
*/

// main(){} - основные функции инициализации и прочего

// stdafx.h/pch.h - предкомпилируемый заголовок 

// #pragma once - подключение заголовка только 1 раз

//#include
/*
	#include - Директива препроцессора, которая подключает код из заголовочного файла. Даёт доступ к функциям, операторам, методами и классам.
	Примеры:
		#include "main.h" // подключает код из заголовочного файла '"main.h"'
		#include <iostream> // подключает код из библиотеки '<iostream>'
*/

//using namespace
/*
	using namespace - задание компилятору, что нужно использовать группу функций, которые являются частью указанной библиотеки.
	Примеры:
		using namespace std;
		cout << "Hello, World!\n"; // использование группы функций из библиотеки 'std'

		std::cout<< "Hello, World!\n"; // без использования 'using namespace std;'
*/

//Типы, свойства и особенности, объявление, присвоение и инициализация переменных. = VALUE - абстрактное имя переменной для примера
/*
	ТИПЫ ДАННЫХ:


*		БЕЗ ТИПА:

*			'void' - character, один символьный элемент типа char
			Примеры:
				'A'('B') // значение типа char
				char VALUE; // объявление переменной типа char
				VALUE = 'A'; // присвоение переменной значения типа char
				char VALUE = 'A'; // инициализация переменной типа char

*			'bool' - boolean, булевое true/false(правда/ложь) значения типа bool
			Примеры:
				true(false) // значение типа bool
				bool VALUE; // объявление переменной типа bool
				VALUE = true; // присвоение переменной значения типа bool
				bool VALUE = true; // инициализация переменной типа bool
			
*			'auto' - boolean, булевое true/false(правда/ложь) значения типа auto
			Примеры:
				true(false) // значение типа auto
				auto VALUE; // объявление переменной типа auto !!!!! НЕ ДОПУСКАЕТСЯ КОМПИЛЯТОРОМ !!!!!
				VALUE = true; // присвоение переменной значения типа auto
				auto VALUE = true; // инициализация переменной типа auto

*		СИМВОЛЬНЫЕ:

*			'char' - character, один символьный элемент типа char
			Примеры:
				'A'('B') // значение типа char
				char VALUE; // объявление переменной типа char
				VALUE = 'A'; // присвоение переменной значения типа char
				char VALUE = 'A'; // инициализация переменной типа char

			Вариации:
				'signed char' - 
		
				'unsigned char' -

				'wchar_t' -

				'char16_t' -

				'char32_t' - 


*		С ПЛАВАЮЩЕЙ ТОЧКОЙ:

*			'float' - float, значение с плавающей точкой типа float
			Примеры:
				1.5(2.5) // значение типа float
				float VALUE; // объявление переменной типа float
				VALUE = 1.5; // присвоение переменной значения типа float
				float VALUE = 1.5; // инициализация переменной типа float

*			'double' - double, вещественное значение типа double
			Примеры:
				1.5(2.5) // символьный элемент типа double
				double VALUE; // объявление переменной типа double
				VALUE = 1.5; // присвоение переменной типа double значения
				double VALUE = 1.5; // инициализация переменной типа double

			Вариации:
				'long double'
					

*		ЦЕЛОЧИСЛЕННЫЕ:

*				'int' - integer, целочисленные значения int
				Примеры:
					10 // целочисленное значение типа int

				Вариации:
					'short int'('short') -

					'long int'('long') -

					'long long int'('long long')

					'unsigned int' - положительные(>=0) целочисленные значения типа int
		
					'unsigned short int'('unsigned short') -
		
					'unsigned long int'('unsigned long int') -

					'unsigned long long int'('unsigned long long int') -


*		МАССИВЫ:
			
*			'array' - integer, целочисленные значения
			Примеры:
				10 // целочисленное значение типа int


*		ОСОБЕННЫЕ:

*			'string' - integer, целочисленные значения
			Примеры:
				10 // целочисленное значение типа int
	

*/


//int/double/char... - действия с переменными, конвертирование, проверки на тип и прочее
// +=, -=, /=, *=, ++, --, ==, , 


//Void/Int/String... - типы функций


// >>/<< - операторы "сдвига и другие"


// int/void... (a, b, c...)
// return 0;
// break; -параметры / аргументы функций, способы возврата значений, прерывания и прочего


// If/switch - булевая логика или case переключения
/* if()
{
	
} else if()
	{
		
	}
else 
{
	
}

==, !=, >, <, >=, <=, &&, ||, ?, :

*/

// while/ do while/ for - циклы



// try - catch = исключения - поимка ошибок в коде.

// стандартые функции типа - ввод значения в консоль/вывод из консоли, задержка, пауза и прочие. генератор чисел. Чтение и запись в файл.



// ******************************************
// Завершение блока подсказок по работе в С++


// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
