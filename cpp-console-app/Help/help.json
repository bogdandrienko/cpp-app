{

	"HELP": "file.format",
	"Общие подсказки": "help.json",
	"Шаблон заголовочного файла": "help.h",
	"Шаблон файла исходного кода": "help.cpp",

	// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
	// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

	// Советы по началу работы 
	//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
	//   2. В окне Team Explorer можно подключиться к системе управления версиями.
	//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
	//   4. В окне "Список ошибок" можно просматривать ошибки.
	//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > 
	//      "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
	//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.


	// ******************Далее будут подсказки по работе в С++:********************

	"С++": {

		// "ОСНОВА" - основные понятия и структура программы на с++: заголовочные и файлы исходного кода, директивы и пространства имён.
		"ОСНОВА": {

			// main.h/<main> - Заголовочный файл.
			/*	
			Описание:
				main.h/<main> - Заголовочный файл.
				Заголовочные файлы (или «заголовки»), которые имеют расширение .h. Целью заголовочных файлов является удобное хранение
				набора объявлений объектов для их последующего использования в других программах, не переживая об их порядке следования.

			Примеры:
				main.h // заголовочный файл.
				<memory> // библиотека или заголовочный файл.
				'stdafx.h'/'pch.h' //	способ ускорить компиляцию программ за счёт предварительной обработки так называемых заголовочных 
										файлов, которые содержат интерфейсы модулей и, согласно нормам данных языков программирования, 
										подключаются к программе путём прямой вставки их текстов в тело основной программы с помощью 
										специальной директивы препроцессора #include. Предкомпилированные заголовки сохраняются на диске 
										в виде файлов во внутреннем формате компилятора и при повторных компиляциях проекта время на их 
										обработку и подключение существенно сокращается. 
		*/

			// main.cpp - Файл исходного кода.
			/*	
			Описание:
				main.cpp - Исходный код.
				
			Примеры:
				main.cpp // содержит основной исходный код проекта и главную запускаемую функцию, определяет точку входа для приложения.
				'stdafx.cpp'/'pch.cpp' // дополнение к предкомпилируемому заголовку.
		*/

			// #include - Директива препроцессора.
			/*	
			Описание:
				#include - Директива препроцессора, которая подключает код из заголовочного файла. Даёт доступ к функциям, операторам, методами и классам.
				
			Примеры:
				#include "main.h" // подключает код из заголовочного файла "main.h".
				#include <iostream> // подключает код из библиотеки <iostream>.
				#pragma once // гарантирует, что подключение текущего заголовочного файла произойдёт только 1 раз.
				#ifdef/#ifndef/#endif // Условная компиляция позволяет определить, при каких условиях код будет компилироваться, а при каких — нет.
				#define // Область видимости директивы.
		*/

			// using namespace std - Пространство имён.
			/*	
			Описание:
				using namespace -	область, в рамках которой определяются различные идентификаторы (имена типов, функций, 
									переменных, и т. д.).Чтобы избежать коллизии имён(совпадении имени класса или переменной) 
									придумали объединять большие участки кода в пространство имен. Они добавляют своеобразный 
									префикс к каждому идентификатору в данном пространстве.
				
			Примеры:
				using namespace std;
				cout << "Введите что-либо: \n";
				string Text;
				cin >> Text;
				cout << Text; // использование группы функций из библиотеки 'std'
					
				std::cout << "Введите что-либо: \n";
				std::string Text;
				std::cin >> Text;
				std::cout << Text; // без использования 'using namespace std;'
		*/
		},

		// "ПЕРЕМЕННЫЕ" - типы, свойства и взаимодействие с переменными.
		"ПЕРЕМЕННЫЕ": {

			//Типы, свойства, объявление, присвоение и инициализация переменных. 'VALUE' - абстрактное имя переменной для примера.
			"ТИПЫ ПЕРЕМЕННЫХ": {

				//"СИМВОЛЬНЫЕ" - представляют собой одно не числовое значения, типа символа.
				"СИМВОЛЬНЫЕ": {

					// 'char' - Сharacter, один символьный элемент типа char.
					/*	
				Описание:
					'char' - представляет один символ в кодировке ASCII. Занимает в памяти 1 байт (8 бит). Может хранить 
					любое значение из диапазона от -128 до 127, либо от 0 до 255

				Примеры:						
					'A'('B') // значение типа char
					char VALUE; // объявление переменной типа char
					VALUE = 'A'; // присвоение переменной значения типа char
					char VALUE = 'A'; // инициализация переменной типа char
			*/

					// 'signed char' - ...
					/*
				Описание:
					'signed char' - ...

				Примеры:
					'signed char' - ...
			*/

					// 'unsigned char' - ...
					/*
				Описание:
					'unsigned char' - ...

				Примеры:
					'unsigned char' - ...
			*/

					// 'wchar_t' - ...
					/*
				Описание:
					'wchar_t' - ...

				Примеры:
					'wchar_t' - ...
			*/

					// 'char16_t' - ...
					/*
				Описание:
					'char16_t' - ...

				Примеры:
					'char16_t' - ...
			*/

					// 'char32_t' - ...
					/*
				Описание:
					'char32_t' - ...

				Примеры:
					'char32_t' - ...
			*/

				},

				//"С ПЛАВАЮЩЕЙ ТОЧКОЙ" - не целые числовые значения.
				"С ПЛАВАЮЩЕЙ ТОЧКОЙ": {

					// 'float' - Float, значение с плавающей точкой типа float.
					/*
				Описание:
					'float' - Представляет вещественное число одинарной точности с плавающей точкой в диапазоне 
					+/- 3.4E-38 до 3.4E+38. В памяти занимает 4 байта (32 бита).

				Примеры:
					1.5(2.5) // значение типа float
					float VALUE; // объявление переменной типа float
					VALUE = 1.5; // присвоение переменной значения типа float
					float VALUE = 1.5; // инициализация переменной типа float
			*/

					// 'double' - Double, значение с плавающей точкой типа double.
					/*
				Описание:
					'double' - представляет вещественное число двойной точности с плавающей точкой в диапазоне 
					+/- 1.7E-308 до 1.7E+308. В памяти занимает 8 байт (64 бита)

				Примеры:
					1.5(2.5) // значение типа Double
					Double VALUE; // объявление переменной типа Double
					VALUE = 1.5; // присвоение переменной значения типа Double
					Double VALUE = 1.5; // инициализация переменной типа Double
			*/

					// 'long double' - Long double, значение с плавающей точкой типа long double.
					/*
				Описание:
					'long double' - представляет вещественное число двойной точности с плавающей точкой не менее 8 байт 
					(64 бит). В зависимости от размера занимаемой памяти может отличаться диапазон допустимых значений.

				Примеры:
					1.5(2.5) // значение типа long double
					long double VALUE; // объявление переменной типа long double
					VALUE = 1.5; // присвоение переменной значения типа long double
					long double VALUE = 1.5; // инициализация переменной типа long double
			*/

				},

				//"ЦЕЛОЧИСЛЕННЫЕ" - целые числовые значения.
				"ЦЕЛОЧИСЛЕННЫЕ": {

					// 'int' - Integer, целочисленные значения int.
					/*
				Описание:
					'int' - Представляет целое число. В зависимости от архитектуры процессора может занимать 2 байта 
					(16 бит) или 4 байта (32 бита). Диапазон предельных значений соответственно также может 
					варьироваться от –32768 до 32767 (при 2 байтах) или от −2 147 483 648 до 2 147 483 647 
					(при 4 байтах). Но в любом случае размер должен быть больше или равен размеру типа short и 
					меньше или равен размеру типа long.

				Примеры:
					10(15) // значение типа int
					int VALUE; // объявление переменной типа int
					VALUE = 10; // присвоение переменной значения типа int
					int VALUE = 15; // инициализация переменной типа int
			*/

					// 'short int'('short') - Целочисленные значения int.
					/*
				Описание:
					'short int' - Представляет целое число в диапазоне от –32768 до 32767. Занимает в памяти 2 байта (16 бит).

				Примеры:
					10(15) // значение типа short int
					short int VALUE; // объявление переменной типа short int
					VALUE = 10; // присвоение переменной значения типа short int
					short int VALUE = 15; // инициализация переменной типа short int
			*/

					// 'long int'('long') - Целочисленные значения int.
					/*
				Описание:
					'long int' - Представляет целое число в диапазоне от −2 147 483 648 до 2 147 483 647. Занимает в памяти 4 байта (32 бита).

				Примеры:
					10(15) // значение типа long int
					long int VALUE; // объявление переменной типа long int
					VALUE = 10; // присвоение переменной значения типа long int
					long int VALUE = 15; // инициализация переменной типа long int
			*/

					// 'long long int'('long long') - Целочисленные значения int.
					/*
				Описание:
					'int' - Представляет целое число в диапазоне от −9 223 372 036 854 775 808 до +9 223 372 036 854 775 807. 
					Занимает в памяти, как правило, 8 байт (64 бита).

				Примеры:
					10(15) // значение типа long long int
					long long int VALUE; // объявление переменной типа long long int
					VALUE = 10; // присвоение переменной значения типа long long int
					long long int VALUE = 15; // инициализация переменной типа long long int
			*/

					// 'unsigned int' - Положительные(>=0) целочисленные значения типа int.
					/*
				Описание:
					'unsigned int' - Представляет положительное целое число. В зависимости от архитектуры процессора 
					может занимать 2 байта (16 бит) или 4 байта (32 бита), и из-за этого диапазон предельных значений 
					может меняться: от 0 до 65535 (для 2 байт), либо от 0 до 4 294 967 295 (для 4 байт).

				Примеры:
					10(15) // значение типа int
					unsigned int VALUE; // объявление переменной типа unsigned int
					VALUE = 10; // присвоение переменной значения типа unsigned int
					unsigned int VALUE = 15; // инициализация переменной типа unsigned int
			*/

					// 'unsigned short int'('unsigned short') - Положительные(>=0) целочисленные значения типа int.
					/*
				Описание:
					'unsigned short int' - Представляет целое число в диапазоне от 0 до 65535. Занимает в памяти 2 байта (16 бит).

				Примеры:
					10(15) // значение типа unsigned short int
					unsigned short int VALUE; // объявление переменной типа unsigned short int
					VALUE = 10; // присвоение переменной значения типа unsigned short int
					unsigned short int VALUE = 15; // инициализация переменной типа unsigned short int
			*/

					// 'unsigned long int'('unsigned long int') - Положительные(>=0) целочисленные значения типа int.
					/*
				Описание:
					'unsigned long int' - Представляет целое число в диапазоне от 0 до 4 294 967 295. Занимает в памяти 4 байта (32 бита).

				Примеры:
					10(15) // значение типа unsigned long int
					unsigned long int VALUE; // объявление переменной типа unsigned long int
					VALUE = 10; // присвоение переменной значения типа unsigned long int
					unsigned long int VALUE = 15; // инициализация переменной типа unsigned long int
			*/

					// 'unsigned long long int'('unsigned long long int') - Положительные(>=0) целочисленные значения типа int.
					/*
				Описание:
					'unsigned long long int' - представляет целое число в диапазоне от 0 до 18 446 744 073 709 551 615. 
					Занимает в памяти, как правило, 8 байт (64 бита).

				Примеры:
					10(15) // значение типа unsigned long long int
					unsigned long long int VALUE; // объявление переменной типа unsigned long long int
					VALUE = 10; // присвоение переменной значения типа unsigned long long int
					unsigned long long int VALUE = 15; // инициализация переменной типа unsigned long long int
			*/

				},

				//"МАССИВЫ" - массивы, т.е. наборы данных разных значений.
				"МАССИВЫ": {

					//СТАТИЧЕСКИЕ МАССИВЫ- имеют заранее заданное количество элементов и памяти внутри массива.
					"СТАТИЧЕСКИЕ МАССИВЫ": {

						// Массив целочисленных значений
						/*
							Описание:
								int arrVALUE - Массив целочисленных значений.

							Примеры:
								10(15) // значение типа int
								int arrVALUE[3]; // объявление массива переменных типа int
								arrVALUE = { 5, -12, -12 }; // присвоение массиву переменных значений типа int
								int arrVALUE[3] = { 5, -12, -12 }; // инициализация массива переменных типа int
						*/

						// Массив не целочисленных значений
						/*
							Описание:
								float arrVALUE - Массив не целочисленных значений.

							Примеры:
								5.2(12.7) // значение типа float
								float arrVALUE[3]; // объявление массива переменных типа float
								arrVALUE = { 5.2, -12.3, 12.7 }; // присвоение массиву переменных значений типа float
								float arrVALUE[3] = { 5.2, -12.3, 12.7 }; // инициализация массива переменных типа float
						*/

						// Массив символьных значений
						/*
							Описание:
								char arrVALUE - Массив символьных значений.

							Примеры:
								'A'('B') // значение типа char
								char arrVALUE[4]; // объявление массива переменных типа char
								arrVALUE = {'a', 'b', 'c', '\0'}; // присвоение массиву переменных значений типа char
								char arrVALUE[4] = {'a', 'b', 'c', '\0'}; // инициализация массива переменных типа char
						*/

						// Массив булевых значений
						/*
							Описание:
								bool arrVALUE - Массив булевых значений.

							Примеры:
								true(false) // значение типа bool
								bool arrVALUE[4]; // объявление массива переменных типа bool
								arrVALUE = {true, false, true, false}; // присвоение массиву переменных значений типа bool
								bool arrVALUE[4] = {true, false, true, false}; // инициализация массива переменных типа bool
						*/

					},

					//ДИНАМИЧЕСКИЕ МАССИВЫ: - выделение памяти возможно в процессе работы.
					"ДИНАМИЧЕСКИЕ МАССИВЫ": {

						// Динамический массив целочисленных значений
						/*
				Описание:
					Динамический массив целочисленных значений - содержит множество целочисленных переменных, которые можно добавлять.

				Примеры:
					int VALUE = 3; // инициализация целочисленной переменной, с будущим размером динамического массива.
					int *ptarrVALUE = new int[VALUE]; // Объявление массива и динамическое выделение памяти для массива.
					ptarrVALUE = { 5, -12, -12 }; // присвоение массиву переменных значений типа int
					int *ptarrVALUE = new int[VALUE]({ 5, -12, -12 }); // инициализация динамического массива
					delete [] ptarrVALUE; // очистка памяти

					//Динамические массивы
					int VALUE = 5; // инициализация целочисленной переменной, с будущим размером динамического массива.
					int *ptarrVALUE = new int[VALUE]; // Объявление массива и динамическое выделение памяти для массива.
					for (int count = 0; count < 10; count++) {
						ptarrVALUE[count] = count;
						cout << ptarrVALUE[count] << " ";
					}
					delete[] ptarrVALUE; // очистка памяти
		
						*/

						// Массив не целочисленных значений
						/*
				Описание:
					...

				Примеры:
					...
				*/

						// Массив символьных значений
						/*
				Описание:
					...

				Примеры:
					...
			*/

						// Массив булевых значений
						/*
				Описание:
					...

				Примеры:
					...
			*/

					},

					//ДВУМЕРНЫЙ МАССИВ - массив, состоящий из одномерных массивов.
					"ДВУМЕРНЫЙ МАССИВ": {
						// ДВУМЕРНЫЙ МАССИВ - массив, состоящий из одномерных массивов.
						/*
							Описание:
								int arrARRVALUE - массив, состоящий из одномерных массивов.

							Примеры:
								10(15) // значение типа int
								int arrARRVALUE[2][3]; // объявление двумерного массива переменных типа int
								arrARRVALUE[2][3] = 10; // присвоение двумерному массиву переменных значений типа int
								int arrARRVALUE[2][3] = { {1, 2}, {3, 4}, {5, 6} }; // инициализация двумерного массива переменных типа int
						*/
					}



				},

				//"ОСОБЕННЫЕ" - особенные типы данных, не относящие к предыдущим типам.
				"ОСОБЕННЫЕ": {

					// 'void' - Void, тип данных без значения.
					/*	
				Описание:
					'void' - Тип данных не содержащих значения, в случае функции, не возвращает никакого значения.
			*/

					// 'bool' - Boolean, логический тип данных.
					/*
				Описание:
					'bool' - логический тип. Может принимать одну из двух значений true (истина/1) и false (ложь.0).

				Примеры:
					'true'(1)/'false'(0) // значение типа bool
					bool VALUE; // объявление переменной типа bool
					VALUE = true; // присвоение переменной значения типа bool
					bool VALUE = true;	// инициализация переменной типа bool									
			*/

					// 'auto' - Automatic, автоматическое определение типа данных.
					/*
				Описание:
					'auto' - Предоставление компилятору самому выводить тип.

				Примеры:
					auto VALUE; // объявление переменной типа auto !!!!! НЕ ДОПУСКАЕТСЯ КОМПИЛЯТОРОМ !!!!!
					VALUE = true; // присвоение переменной значения типа auto
					bool VALUE = true;	// инициализация переменной типа auto			
			*/

					// 'string' - String, строковый тип данных.
					/*
				Описание:
					'string' - Строки представляются массивом символов.

				Примеры:
					string VALUE; // объявление переменной типа string
					VALUE = "anything"; // присвоение переменной значения типа string
					string VALUE = "anything";	// инициализация переменной типа string

					char arrcharHello[6] = { 'H', 'e', 'l', 'l', 'o', '\0' }; // представление строки как массив символов
					for (int i = 0; i < 5; i++) {
						cout << arrcharHello[i];
					}
					cout << endl;
					string hello = "Hello"; // представление строки с помощью типа данных string
					cout << hello << endl;
			*/

					//Вектора - векторный тип данных.
					/*
						vector <int> vect(10);
						int arr[3] = { 23, 34, 56 };
						vect.insert(vect.begin(), arr, arr + 2);
						cout << vect.at(1) << endl;
					*/
				}

			},

			//Взаимодействие с переменными.
			"ДЕЙСТВИЯ С ПЕРЕМЕННЫМИ": {

				"действия с переменными": {

					// 'anything' - ...
					/*	
				Описание:
					'anything' - ...

				Примеры:
					'anything' - ...

				Вариации: 
					'anything' - ...
			*/

					// 'anything' - ...
					/*	
				Описание:
					'anything' - ...

				Примеры:
					'anything' - ...

				Вариации: 
					'anything' - ...
			*/

				},

				"Приведение к типу": {

					//Приведение к типу
					/*
						charValue = 'A';
						intValue = 9;
						floatValue = 5.7;

							cout << static_cast<char>(charValue) << endl;
							cout << static_cast<int>(charValue) << endl;
							cout << static_cast<float>(charValue) << endl;

							cout << static_cast<char>(intValue) << endl;
							cout << static_cast<int>(intValue) << endl;
							cout << static_cast<float>(intValue) << endl;
							cout << (float)intValue

							cout << static_cast<char>(floatValue) << endl;
							cout << static_cast<int>(floatValue) << endl;
							cout << static_cast<float>(floatValue) << endl;
							cout << (int)floatValue
					*/

				},

				"проверки на тип": {

					// 'anything' - ...
					/*	
				Описание:
					'anything' - ...

				Примеры:
					'anything' - ...

				Вариации: 
					'anything' - ...
			*/

					// 'anything' - ...
					/*	
				Описание:
					'anything' - ...

				Примеры:
					'anything' - ...

				Вариации: 
					'anything' - ...
			*/

				}

			},

			//УКАЗАТЕЛИ И ССЫЛКИ - динамические массивы и данные.
			"УКАЗАТЕЛИ И ССЫЛКИ": {
				//Указатели и ссылки - указатель - динамические массивы и данные.
				/*
					int value = 9; // Инициализация изначальной переменной.
					cout << "Значение переменной: '" << value << "'. Адрес переменной: '" << &value << "'." << endl;

					int *ptrvalue = &value; // Создание указателя на переменную.
					cout << "Значение указателя: '" << *ptrvalue << "'. Адрес указателя: '" << ptrvalue << "'." << endl;

					int **ptr_ptrvalue = &ptrvalue; // Создание указателя на указатель.
					cout << "Значение указателя указателя: '" << **ptr_ptrvalue << "'. Адрес указателя указателя: '" << ptr_ptrvalue << "'." << endl;

					int &ref = value; // Создание ссылки на переменную.
					cout << "Значение ссылки: '" << ref << "'. Адрес ссылки: '" << &ref << "'." << endl;
				*/
			}

		},

		// "АЛГЕБРАИЧЕСКИЕ ОПЕРАЦИИ" - простейшие действия со значениями и переменными.
		"АЛГЕБРАИЧЕСКИЕ ОПЕРАЦИИ": {

			// Увеличиение на значение
			/*
				Value = 0;
				Value = Value + 2;
				cout << Value << endl;
			*/

			// Увеличиение на единицу
			/*
				Value = 0;
				Value += 1;
				cout << Value << endl;
			*/

			// Уменьшение на значение
			/*
				Value = -2;
				Value = Value - 2;
				cout << Value << endl;
			*/

			// Уменьшение на единицу
			/*
				Value = 0;
				Value--;
				cout << Value << endl;
			*/

			// Умножение на значение
			/*
				Value = 0;
				Value *= 1;
				cout << Value << endl;
			*/

			// Деление на значение
			/*
				Value = 0;
				Value /= 1;
				cout << Value << endl;
			*/

			// Остаток от деления на значение
			/*
				Value = 0;
				Value %= 1;
				cout << Value << endl;
			*/

		},

		// "ЛОГИЧЕСКИЕ ОПЕРАЦИИ / УСЛОВИЯ" -
		"ЛОГИЧЕСКИЕ ОПЕРАЦИИ / УСЛОВИЯ": {

			// IF - логический разделитель на 2 ветки.
			"IF": {
				// Сравнение с несколькими вариантами
				/*
					int Value = 18;
					cin >> Value;
					if (Value > 17) {
						cout << "Вы взрослый" << endl;
					}
					else if (Value == 17) {
						cout << "Вы почти взрослый" << endl;
					}
					else if (Value >= 14) {
						cout << "Вы подросток" << endl;
					}
					else {
						cout << "Вы ребёнок" << endl;
					}
				*/

				// Сравнение, Не, больше, меньше, больше или равно, меньше или равно
				/*
					int x = 0, y = 0;
					cin >> x;
					cin >> y;
					if (x == y) {
						std::cout << x << " equals " << y << "\n";
					}
					if (x != y) {
						std::cout << x << " does not equal " << y << "\n";
					}
					if (x > y) {
						std::cout << x << " is greater than " << y << "\n";
					}
					if (x < y) {
						std::cout << x << " is less than " << y << "\n";
					}
					if (x >= y) {
						std::cout << x << " is greater than or equal to " << y << "\n";
					}
					if (x <= y) {
						std::cout << x << " is less than or equal to " << y << "\n";
					}
				*/

				// Упрощённая запись сравнения(intValue == 1 ? 10 : 20)
				/*
					int intValue = 0;
					cout << "Введите значение 1" << endl;
					cin >> intValue;
					intValue = intValue == 1 ? 10 : 20;
					if (intValue == 10) {
						cout << "Спасибо за введённую единицу!" << endl;
					}
					if (intValue == 20) {
						cout << "Вы не выполнили просьбу!" << endl;
				*/

				// ИЛИ
				/*
					int intValue = 0;
					cin >> intValue;
					if (intValue == 0 || intValue == 1) {
						std::cout << "You picked 0 or 1" << std::endl;
					}
					else {
						std::cout << "You did not pick 0 or 1" << std::endl;
					}
				*/

				// И
				/*
					int intValue = 0;
					cin >> intValue;
					if (intValue >= 10 && intValue <= 20) {
						std::cout << "Your value is between 10 and 20" << std::endl;
					}
					else {
						std::cout << "Your value is not between 10 and 20" << std::endl;;
					}
				*/

			},

			// SWITCH - логический разделитель по веткам соответствия.
			"SWITCH": {
				// "SWITCH"
				/*
					char charValue = '*';
					cin >> charValue;
					switch (charValue) {
						case '+':
							cout << "Сложение" << endl;
							break;
						case '-':
							cout << "Вычитание" << endl;
							break;
						case '*':
							cout << "Умножение" << endl;
							break;
						case '/':
							cout << "Деление" << endl;
							break;
						case '%':
							cout << "Остаток после деления" << endl;
							break;
						default:
							cout << "Неизвестное выражение" << endl;
							break;
					}
				*/

			},

			"ENUM": {
				// ENUM - enumerator, логический перечислитель.
				/*
					ENUM - enumerator, логический перечислитель.
				*/
			}

		},

		// "ОПЕРАТОРЫ" -
		"ОПЕРАТОРЫ": {

			// 'anything' - ...
			/*	
				Описание:
					'anything' - ...

				Примеры:
					'anything' - ...

				Вариации: 
					'anything' - ...
		*/

			// 'anything' - ...
			/*	
				Описание:
					'anything' - ...

				Примеры:
					'anything' - ...

				Вариации: 
					'anything' - ...
		*/

			// 'anything' - ...
			/*	
				Описание:
					'anything' - ...

				Примеры:
					'anything' - ...

				Вариации: 
					'anything' - ...
		*/

			// >>/<< - операторы "сдвига и другие"
		},

		//"ЦИКЛЫ" -
		"ЦИКЛЫ": {

			// 'WHILE' - ...
			/*
				Описание:
					'WHILE' - ...

				Примеры:
					int i = 1;
					while (i <= 10) {
						cout << i << endl;
						i += 1;
					}
			*/

			// 'Do WHILE' - ...
			/*
				Описание:
					'Do WHILE' - ...

				Примеры:
					int i = 5;
					do {
						cout << i << endl;
					} while (i > 10);
			*/

			// 'FOR' - ...
			/*
				Описание:
					'FOR' - ...

				Примеры:
					for (int i = 1; i <= 10; i++) {
						cout << i << endl;
					}
			*/
		},

		// "ФУНКЦИИ" -
		"ФУНКЦИИ": {
			
			// Тип возвращаемых данных:
			/*
				void(int/float/char/string...) - тип возвращаемых данных (return);
			*/
			
			// Параметры(аргументы) функций:
			/*
				int/void... (a, b, c...)
			*/

			// Остановка, продолжение, прерывание функций
			/*
				break; -параметры / аргументы функций, способы возврата значений, прерывания и прочего
			*/

			// стандартые функции типа - ввод значения в консоль/вывод из
			/*
	
				std::cout << "Ответ: " << pow(2, 3) << "\n";
				std::cout << "Ответ: " << abs(-23) << "\n";
				std::cout << "Ответ: " << sqrt(ceil(15.8)) << "\n";
				std::cout << "Ответ: " << ceil(23.5) << "\n";
				std::cout << "Ответ: " << floor(23.5) << "\n";
			*/

			//консоли, задержка, пауза и прочие. генератор чисел. Чтение и запись в файл.
			/*
				....
			*/

			//Прототипы функций:
			/*
				void printText(string text);
				void printText(float text);
				void printText(int text);
			*/

			// Перегрузка функции с другими типами данных:
			/*
				void printText(string text) {
				cout << text << endl;
				};

				void printText(float text) {
				cout << text << endl;
				};

				void printText(int text) {
				cout << text << endl;
				};
			*/
			
		},

		// "ИСКЛЮЧЕНИЯ" -поимка исключений или ошибок в коде
		"ИСКЛЮЧЕНИЯ": {
			/*
				int x;
				cin >> x;
				int y;
				cin >> y;

				errorFunc(x, y);

				void errorFunc(float a, int b) {
				float res;
				try {
					if (b != 0) {
						res = a / b;
					}
					else {
						throw (b);
					}
				}
				catch (int number) {
					cout << "Ошибка, делитель не может равняться нулю!" << endl;
					res = 0;
				}

				cout << res << endl;
				}
			*/

		},

		// "КЛАССЫ" -
		"КЛАССЫ": {
			// Классы: 
			/*
					class Car {
					//Публичные параметры
					public:
						//Конструктор, без параметров
						Car() {

						}
						//Конструктор, перегруженный, с параметрами
						Car(int height, float speed) {
							this->height = height;
							this->speed = speed;
						}

						// Методы класса
						void setValues(int height, float speed) {
							this->height = height;
							this->speed = speed;
						}
						void print() {
							cout << this->height << " - " << this->speed << endl;
						}
	
						//Деструктор
						~Car() {
							cout << "Class is destruct!" << endl;
						}
					//Приватные параметры
					private:

					//Защищённые параметры
					protected:
						float cost;
						int height;
						float speed;
					};

					class Motorcycle : public Car {
					public:
						void print() {
						cout << height << " - " << speed << endl;
						}
					};

					Car shkoda(1100, 234.5);
					shkoda.print();

					Car audi;
					audi.setValues(300, 125.4);
					audi.print();

					Motorcycle bmw;
					bmw.setValues(23, 234);
					bmw.print();
			*/

		}

	}

	// ******************Завершение блока подсказок по работе в С++****************

}